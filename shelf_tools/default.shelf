<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="custom_stuff" label="custom_networks_nonHDA">
    <memberTool name="stage_lopnet"/>
    <memberTool name="stage_sopnet"/>
  </toolshelf>

  <tool name="stage_lopnet" label="stage_lopnet" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[#set the LOP / STAGE context
lop = hou.node('/stage')

#Start building the nodes, each has a variable so that they can be connected etc later
#they're not in a dictionary for transparency and easy swap of node archetype
#you can swap whichever you want, just follow the chain of nodes down the line for any new/removed

#sop import background
bg_import = lop.createNode('sopimport', 'background')

#background transform
transform_bg1 = lop.createNode('xform', 'background_transform')

#sop import for null
sop_import1 = lop.createNode('sopimport', 'FIRST_NULL')

#merge geos / sop imports
merge_geo1 = lop.createNode('merge')

#material library
matlib1 = lop.createNode('materiallibrary')

#material linker
matlinker1 = lop.createNode('materiallinker')

#camera
camera1 = lop.createNode('camera')

        ### LIGHT BRANCH START

#dome light / hdri
domelight1 = lop.createNode('domelight::2.0', 'hdri')

#area light 1 
arealight1 = lop.createNode('light::2.0')

#area light 2
arealight2 = lop.createNode('light::2.0')

#merge lights internal
merge_lights2 = lop.createNode('merge')

#light mixer
lightmixer1 = lop.createNode('lightmixer')

        ### LIGHT BRANCH END

#merge lights to main
merge_lights1 = lop.createNode('merge')

#karma render settings
karmarendersettings1 = lop.createNode('karmarenderproperties')

#usd render rop
usdrenderrop1 = lop.createNode('usdrender_rop')


#Wire them together
transform_bg1.setInput(0, bg_import, 0)
merge_geo1.setInput(0, transform_bg1, 0)
merge_geo1.setInput(1, sop_import1, 0)
matlib1.setInput(0, merge_geo1, 0)
matlinker1.setInput(0, matlib1, 0)
camera1.setInput(0, matlinker1, 0)
        #LIGHT BRANCH LINK START
merge_lights2.setInput(0, domelight1, 0)
merge_lights2.setInput(1, arealight1, 0)
merge_lights2.setInput(2, arealight2, 0)
lightmixer1.setInput(0,merge_lights2,0)
        #LIGHT BRANCH LINK END
merge_lights1.setInput(0, camera1, 0)
merge_lights1.setInput(1, lightmixer1, 0)
karmarendersettings1.setInput(0, merge_lights1, 0)
usdrenderrop1.setInput(0, karmarendersettings1, 0)

#set parameters for render nodes
karmarendersettings1.parm('engine').set("XPU Engine")
karmarendersettings1.parm('resolutionx').set(1920)
karmarendersettings1.parm('denoiser').set("nVidia Optix Denoiser")
usdrenderrop1.parm('renderer').set("Karma XPU")

#Align them
lop.layoutChildren()

#display/render flags
karmarendersettings1.setDisplayFlag(True)]]></script>
  </tool>

  <tool name="stage_sopnet" label="stage_sopnet" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[#choose the SOP / OBJ context
def find_geo_container():
    #get /obj
    obj_node = hou.node('/obj')

    #check for geo containers inside /obj
    for child in obj_node.children():        
        if child.type().name() == 'geo':
            return child

    #make new container if none
    print("making new geo containers")
    return obj_node.createNode('geo', 'background_grid_autogenerated')

def create_renderstuff():
    #get into container from above function
    geo_container = find_geo_container()

    #grid
    grid = geo_container.createNode('grid')
        #grid parameters
    grid.parm('sizex').set(20)
    grid.parm('sizey').set(20)
    grid.parm('rows').set(70)
    grid.parm('cols').set(2)
    grid.parm('tz').set(-2.3)
    
    #bend
    bend = geo_container.createNode('bend')
        #bend parameters
    bend.parm('dodeform').set(True)
    bend.parm('limit_deformation').set(True)
    bend.parm('enablebend').set(True)
    bend.parm('bend').set(90)
    bend.parm('enablelengthscale').set(True)
    bend.parm('lengthscale').set(0.38)
    bend.parm('dirz').set(-1)
    bend.parm('length').set(4.98)
    
    #xform
    transform = geo_container.createNode('xform')
    transform.parm('tz').set(-2.5)
    
    #labs_autouv
    uv = geo_container.createNode('labs::autouv')
    
    #uv_transform
    uvxform = geo_container.createNode('uvtransform::2.0')
    uvxform.parm('sx').set(1.5)
    uvxform.parm('sy').set(1.5)    
    uvxform.parm('sz').set(1.5)
    
    #out_null
    null = geo_container.createNode('null', 'OUT_BACKGROUND')
    
    #wire them
    bend.setInput(0, grid, 0)
    transform.setInput(0, bend, 0) 
    uv.setInput(0, transform, 0)  
    uvxform.setInput(0, uv, 0)
    null.setInput(0, uvxform, 0)
    
    #Align them
    geo_container.layoutChildren()
    
        

create_renderstuff()]]></script>
  </tool>

  <toolshelfEdit name="create" fileLocation="/opt/hfs20.0.625/houdini/toolbar/ShelfDefinitions.shelf"/>

  <shelfSetEdit name="shelf_set_1" fileLocation="/opt/hfs20.0.625/houdini/toolbar/ShelfDefinitions.shelf">
    <addMemberToolshelf name="custom_stuff" inPosition="14"/>
  </shelfSetEdit>
</shelfDocument>
